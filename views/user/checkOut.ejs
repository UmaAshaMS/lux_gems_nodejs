<%- include('./layout/header') %>
    <%- include('./layout/navbar') %>
        <%- include('./layout/category_navbar') %>

            <div class="container my-5">
                <form id="checkoutForm" onsubmit="submitCheckout(event)">
                    <h2 class="mb-4">Checkout</h2>
                    <div class="row">
                        <!-- Left Section: Address, Coupon, Payment -->
                        <div class="col-md-6">
                            <!-- Address Section -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <h5 class="card-title">Delivery Address</h5>
                                    <% if (defaultAddress) { %>
                                        <p class="card-text"><strong>
                                                <%= defaultAddress.fullName %>
                                            </strong></p>
                                        <p class="card-text">
                                            <%= defaultAddress.addressLine1 %>, <%= defaultAddress.addressLine2 %>
                                        </p>
                                        <p class="card-text">
                                            <%= defaultAddress.city %>, <%= defaultAddress.state %>, <%=
                                                        defaultAddress.country %>
                                        </p>
                                        <p class="card-text">PINCODE: <%= defaultAddress.pincode %>
                                        </p>
                                        <p class="card-text">Phone Number: <%= defaultAddress.phoneNumber %>
                                        </p>
                                        <button type="button" class="btn btn-secondary" data-bs-toggle="modal"
                                            data-bs-target="#addressModal">Change Address</button>
                                        <% } else if (selectedAddress) { %>
                                            <% const selectedAddr=userAddress.find(addr=> addr._id.toString() ===
                                                selectedAddress.toString()); %>
                                                <p class="card-text"><strong>
                                                        <%= selectedAddr.fullName %>
                                                    </strong></p>
                                                <p class="card-text">
                                                    <%= selectedAddr.addressLine1 %>, <%= selectedAddr.addressLine2 %>
                                                </p>
                                                <p class="card-text">
                                                    <%= selectedAddr.city %>, <%= selectedAddr.state %>, <%=
                                                                selectedAddr.country %>
                                                </p>
                                                <p class="card-text">PINCODE: <%= selectedAddr.pincode %>
                                                </p>
                                                <p class="card-text">Phone Number: <%= selectedAddr.phoneNumber %>
                                                </p>
                                                <% } else { %>
                                                    <p class="card-text">No default address available. Please add one.
                                                    </p>
                                                    <a href="/addAddressCheckout" class="btn btn-primary">Add
                                                        Address</a>
                                                    <% } %>
                                </div>
                            </div>

                            <!-- Coupon Section -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <h5 class="card-title">Apply Coupon</h5>
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" id="couponCode"
                                            placeholder="Enter Coupon Code">
                                        <button class="btn btn-outline-secondary" type="button"
                                            id="applyCouponBtn">Apply</button>
                                    </div>
                                    <a>Remove </a>

                                    <div id="couponFeedback"></div>
                                </div>
                            </div>

                            <!-- Payment Section -->
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">Payment Options</h5>



                                    <div class="form-check mb-3">
                                        <% if (wallet && wallet.balance> 0) { %>
                                            <!-- Check if wallet exists and balance is greater than 0 -->
                                            <input class="form-check-input" type="radio" name="paymentMethod"
                                                id="walletOption" value="2">
                                            <label class="form-check-label" for="walletOption">
                                                <strong>Wallet</strong> <span>(Balance : Rs.<%= wallet.balance %>
                                                        )</span>
                                            </label>
                                            <% } else { %>
                                                <!-- If no wallet or balance is 0, show this alternative message -->
                                                <input class="form-check-input" type="radio" name="paymentMethod"
                                                    id="walletOption" disabled>
                                                <label class="form-check-label" for="walletOption">
                                                    <strong>Wallet</strong> <span>(No wallet or insufficient
                                                        balance)</span>
                                                </label>
                                                <% } %>
                                    </div>

                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="radio" name="paymentMethod"
                                            id="razorpayOption" value="4">
                                        <label class="form-check-label" for="razorpayOption">
                                            <strong>Razorpay</strong>
                                        </label>
                                    </div>

                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="upiOption"
                                            value="1">
                                        <label class="form-check-label" for="upiOption">
                                            <strong>PayPal</strong>

                                        </label>
                                        <div class="mt-2">
                                            <!-- <input type="text" class="form-control" placeholder="Enter UPI ID"> -->
                                            <div id="paypal-button-container"></div>

                                        </div>
                                    </div>

                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="radio" name="paymentMethod" id="codOption"
                                            value="0">
                                        <label class="form-check-label" for="codOption">
                                            <strong>Cash on Delivery (COD)</strong>
                                        </label>
                                        <p class="mb-0">Pay when your order is delivered.</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Right Section: Order Summary -->
                        <div class="col-md-6">
                            <div class="card mb-6">
                                <div class="card-body">
                                    <h5 class="card-title">Order Summary</h5>
                                    <ul class="list-group list-group-flush">
                                        <% if (cart && cart.product && cart.product.length> 0) { %>
                                            <% cart.product.forEach(productItem=> { %>
                                                <% if (productItem.productId.isActive) { %>

                                                <li class="list-group-item">
                                                    <div class="d-flex justify-content-between">
                                                        <span><strong>
                                                                <%= productItem.productId.productName %>
                                                            </strong></span>
                                                        <span>Quantity: <%= productItem.quantity %></span>
                                                    </div>
                                                    <div class="d-flex justify-content-between mt-1">
                                                        <span>Original Price: <strong>Rs <%=
                                                                    productItem.productId.productPrice.toFixed(2) %>
                                                            </strong></span>
                                                        <span>Product Offer: <strong>
                                                                <%= productItem.productId.productDiscount ?
                                                                    productItem.productId.productDiscount.toFixed(2)
                                                                    : '0' %> %

                                                            </strong></span>
                                                    </div>
                                                    <div class="d-flex justify-content-between mt-1">
                                                        <span>Offer Price: <strong>Rs <%=
                                                                    (productItem.productId.productPrice -
                                                                    (productItem.productId.productDiscount /
                                                                    100)*productItem.productId.productPrice).toFixed(2)
                                                                    %></strong></span>
                                                        <span>Total: <strong>Rs <%= ((productItem.productId.productPrice
                                                                    - (productItem.productId.productDiscount / 100) *
                                                                    productItem.productId.productPrice) *
                                                                    productItem.quantity).toFixed(2) %>
                                                            </strong></span>
                                                    </div>
                                                </li>
                                                <% }; %>
                                                <%}) %>

                                                    <li class="list-group-item">
                                                        <strong>Total: Rs <%= cart.product.filter(item => item.productId.isActive).reduce((total, item) =>
                                                                total + ((item.productId.productPrice - (item.productId.productDiscount / 100) *
                                                                item.productId.productPrice) * item.quantity), 0).toFixed(2) %></strong>
                                                    </li>
                                                    <li class="list-group-item">
                                                        <strong>Delivery Charge: </strong> Rs <%=
                                                            deliveryCharge.toFixed(2) %>
                                                            <% if (deliveryCharge===0) { %>
                                                                <span class="text-success">(Free delivery for orders
                                                                    above ₹2000)</span>
                                                                <% } else { %>
                                                                    <span class="text-warning">(Delivery charge
                                                                        applies
                                                                        for orders below ₹2000)</span>
                                                                    <% } %>
                                                    </li>
                                                    <li class="list-group-item">
                                                        <strong>Promotion Applied:</strong> Rs <span
                                                            id="promotionAmount">
                                                            <%= promotionAmount.toFixed(2) %>
                                                        </span>
                                                    </li>
                                                    <li class="list-group-item">
                                                        <h4 style="color:rgb(139, 12, 12)"><strong>Order
                                                                Total:</strong>
                                                            Rs <span id="OrderTotal">
                                                                <%= (subtotal + deliveryCharge -
                                                                    promotionAmount).toFixed(2) %>
                                                            </span></h4>
                                                    </li>
                                                    <% } else { %>
                                                        <li class="list-group-item">Your cart is empty.</li>
                                                        <% } %>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Place Order Button -->
                    <div class="form-group text-center mt-5">
                        <button type="button" class="btn btn-black btn-lg py-3" id="placeOrderButton"
                            onclick="confirmCheckout(event)">Place Order</button>
                    </div>
                </form>
            </div>


            <input type="hidden" name="selectedAddress" id="selectedAddress"
                value="<%= defaultAddress ? defaultAddress._id : '' %>">

            <!-- Address Modal -->
            <div id="addressModal" class="modal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Delivery Address</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <% if (userAddress && userAddress.address && userAddress.address.length> 0) { %>
                                <% userAddress.address.forEach((address, index)=> { %>
                                    <div class="address-item d-flex align-items-start mb-3">
                                        <input type="radio" name="address"
                                            onclick="updateSelectedAddress('<%= address._id %>')"
                                            id="modalAddress<%= address._id %>" value="<%= address._id %>" class="me-2"
                                            <%=address._id.toString()===(defaultAddress ? defaultAddress._id.toString()
                                            : '' ) ? 'checked' : '' %>>
                                        <label for="modalAddress<%= address._id %>" class="w-100">
                                            <p class="mb-1"><strong>
                                                    <%= address.fullName %>
                                                </strong></p>
                                            <p class="mb-1">
                                                <%= address.addressLine1 %>, <%= address.addressLine2 %>
                                            </p>
                                            <p class="mb-1">
                                                <%= address.city %>, <%= address.state %>, <%= address.country %>
                                            </p>
                                            <p class="mb-1">PINCODE: <%= address.pincode %>
                                            </p>
                                            <p>Phone Number: <%= address.phoneNumber %>
                                            </p>
                                        </label>
                                        <input type="hidden" id="addressId" value="<%= address._id %>">

                                        <a href="/editAddressCheckout/<%= address._id %>" class="ms-3">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="ms-3" onclick="deleteAddress('<%= address._id %>')"><i
                                                class="fas fa-trash-alt"></i></button>
                                    </div>
                                    <% }); %>
                                        <% } else { %>
                                            <p>No addresses available. Please add a new address.</p>
                                            <% } %>
                                                <a href="/addAddressCheckout" class="btn">Add New Address</a>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary"
                                onclick="confirmAddressSelection()">Confirm</button>
                        </div>
                    </div>
                </div>
            </div>



            <script src="https://www.paypal.com/sdk/js?client-id=<%=paypalClientId%>&currency=USD"></script>
            <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

            <script>

                const paymentOptions = document.getElementsByName('paymentMethod')

                const userAddress = <%- JSON.stringify(userAddress) %>;


                console.log('USER ADDRESS', userAddress)

                function updateSelectedAddress(addressId) {
                    document.getElementById("selectedAddress").value = addressId;
                }


                function confirmAddressSelection() {
                    // Get the selected address ID
                    const selectedAddressId = document.getElementById('selectedAddress').value;

                    if (!selectedAddressId) {
                        Swal.fire({
                            title: 'Error',
                            icon: 'error',
                            text: 'Please select an address',
                            confirmButtonText: 'OK'
                        });
                        return;
                    }

                    const addressLabel = document.querySelector(`label[for="modalAddress${selectedAddressId}"]`);
                    const cardBody = document.querySelector('.card-body');

                    cardBody.innerHTML = addressLabel.innerHTML + `<button type="button" class="btn btn-secondary mt-3" data-bs-toggle="modal" data-bs-target="#addressModal">Change Address</button>`;

                    const modalElement = document.getElementById('addressModal');
                    const modalInstance = bootstrap.Modal.getInstance(modalElement);
                    if (modalInstance) {
                        modalInstance.hide();
                    }
                }

                function updateAddressInUI(addressData) {
                    const addressRow = document.getElementById(`address-${addressData.id}`);
                    if (addressRow) {
                        addressRow.querySelector('.fullName').innerText = addressData.fullName;
                        addressRow.querySelector('.phoneNumber').innerText = addressData.phoneNumber;
                        addressRow.querySelector('.addressLine1').innerText = addressData.addressLine1;
                        addressRow.querySelector('.addressLine2').innerText = addressData.addressLine2;
                        addressRow.querySelector('.city').innerText = addressData.city;
                        addressRow.querySelector('.pinCode').innerText = addressData.pinCode;
                        addressRow.querySelector('.state').innerText = addressData.state;
                        addressRow.querySelector('.country').innerText = addressData.country;
                    }
                }

                const addressId = document.getElementById("addressId").value;
                function deleteAddress(addressId) {
                    // Use SweetAlert for confirmation
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You will not be able to recover this address!',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/deleteAddressCheckout/${addressId}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        // Show success message with SweetAlert
                                        Swal.fire(
                                            'Deleted!',
                                            'Your address has been deleted.',
                                            'success'
                                        ).then(() => {
                                            // Redirect to checkout page after address deletion
                                            location.href = '/checkout';
                                        });
                                    } else {
                                        Swal.fire(
                                            'Failed!',
                                            'Failed to delete address: ' + data.message,
                                            'error'
                                        );
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire(
                                        'Error!',
                                        'An error occurred while deleting the address.',
                                        'error'
                                    );
                                });
                        }
                    });
                }



                document.getElementById('applyCouponBtn').addEventListener('click', async () => {
                    const couponCode = document.getElementById('couponCode').value;
                    const couponFeedback = document.getElementById('couponFeedback');

                    console.log(couponCode);

                    try {
                        // Make a POST request to apply the coupon
                        const response = await fetch('/applyCoupon', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ couponCode }),
                        });

                        const result = await response.json();

                        if (response.ok) {
                            // feedback message on successful coupon application
                            couponFeedback.innerHTML = `<span class="text-success">Coupon applied successfully! Discount: ₹${result.discountAmount}</span>`;
                            updateOrderSummary(result.orderTotal, result.discountAmount);

                        } else {
                            //error message if the coupon application failed
                            couponFeedback.innerHTML = `<span class="text-danger">${result.message}</span>`;
                            setTimeout(() => {
                                couponFeedback.innerHTML = '';
                            }, 5000);
                        }
                    } catch (error) {
                        couponFeedback.innerHTML = `<span class="text-danger">Error applying coupon. Please try again. ${error}.</span>`;
                        console.error('Error applying coupon:', error);
                    }
                });

                function updateOrderSummary(orderTotal, discountAmount) {
                    // Update the displayed values for order total and promotion amount
                    document.getElementById('OrderTotal').innerText = `₹${orderTotal}`;
                    document.getElementById('promotionAmount').innerText = `- ₹${discountAmount}`;
                }

                function confirmCheckout(event) {
                    if (event) {
                        event.preventDefault();
                        console.log('event triggered')
                    }

                    document.getElementById('applyCouponBtn').addEventListener('click', function () {
                        const couponCode = document.getElementById('couponCode').value;
                        console.log(couponCode);
                    });

                    // console.log('hlooooooooooooooooooooooooooooooooooooooooooo')

                    const selectedAddressId = document.getElementById('selectedAddress').value;
                    const defaultAddress = {
                        fullName: '<%= defaultAddress?.fullName || "N/A" %>',
                        addressLine1: '<%= defaultAddress?.addressLine1 || "N/A" %>',
                        addressLine2: '<%= defaultAddress?.addressLine2 || "N/A" %>',
                        city: '<%= defaultAddress?.city || "N/A" %>',
                        state: '<%= defaultAddress?.state || "N/A" %>',
                        country: '<%= defaultAddress?.country || "N/A" %>',
                        pincode: '<%= defaultAddress?.pincode || "N/A" %>',
                        phoneNumber: '<%= defaultAddress?.phoneNumber || "N/A" %>'
                    };


                    let addressToSend;

                    if (selectedAddressId) {
                        const selectedAddress = userAddress.address.find(addr => addr._id === selectedAddressId);
                        addressToSend = {
                            fullName: selectedAddress.fullName,
                            addressLine1: selectedAddress.addressLine1,
                            addressLine2: selectedAddress.addressLine2,
                            city: selectedAddress.city,
                            state: selectedAddress.state,
                            country: selectedAddress.country,
                            pincode: selectedAddress.pincode,
                            phoneNumber: selectedAddress.phoneNumber
                        };
                    } else {
                        addressToSend = defaultAddress;
                    }
                    let paymentIsChecked = false
                    let selectedPaymentOption = 0
                    for (let i = 0; i < paymentOptions.length; i++) {
                        if (paymentOptions[i].checked) {
                            selectedPaymentOption = paymentOptions[i].value
                            paymentIsChecked = true
                            break;
                        }
                    }

                    if (!paymentIsChecked) {
                        Swal.fire({
                            title: 'Error',
                            icon: 'error',
                            text: 'Select a payment method',
                            confirmButtonText: 'OK'
                        });
                        return
                    }
                    const orderTotal = parseFloat(document.getElementById('OrderTotal').innerText);
                    console.log('Order Total ready for payment : no change needed', orderTotal)
                    const couponCode = document.getElementById('couponCode').value;
                    console.log('Coupon code :', couponCode)

                    //if the option is COD
                    if (parseInt(selectedPaymentOption) === 0) {
                        const URL = `/placeOrder`
                        fetch(URL, {
                            method: 'POST',
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ addressToSend, selectedPaymentOption, couponCode })

                        }).then((res) => {

                            return res.json()
                        }).then((data) => {

                            if (data.success) {
                                window.location.href = `/orderConfirmed/${data.orderId}`
                            }
                            else if (data.message) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'error',
                                    text: data.message,
                                })
                            }
                        }).catch((err) => {
                            console.log(`error on paying using cod`)
                        })
                    }

                    //if the option is PAYPAL
                    if (parseInt(selectedPaymentOption) === 1) {
                        const URL = '/renderPaypal';
                        fetch(URL, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ totalAmount: orderTotal })
                        })
                            .then((res) => res.json())
                            .then((data) => {
                                if (data.orderID) {
                                    paypal.Buttons({
                                        createOrder: function () {
                                            return data.orderID;
                                        },
                                        onApprove: function (data, actions) {
                                            return fetch('/placeOrder', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json'
                                                },

                                                body: JSON.stringify({
                                                    selectedAddressOption: addressToSend,
                                                    selectedPaymentOption: selectedPaymentOption,
                                                    paypalOrderID: data.orderID
                                                })
                                            })
                                                .then((res) => res.json())
                                                .then((data) => {
                                                    if (data.success) {
                                                        window.location.href = `/orderConfirmed/${data.orderId}`;
                                                    } else if (data.error) {
                                                        Swal.fire({
                                                            icon: 'warning',
                                                            title: 'Error',
                                                            text: data.error
                                                        });
                                                    }
                                                })
                                                .catch((err) => {
                                                    console.error('Error processing payment with PayPal', err);
                                                });
                                        },
                                        onCancel: function () {
                                            window.location.href = '/payment-cancel';
                                        }
                                    }).render('#paypal-button-container');
                                } else {
                                    console.error('No order ID returned from server.');
                                }
                            })
                            .catch((err) => {
                                console.error('Error fetching PayPal order', err);
                            });
                    }

                    
                    //if the option is WALLET
                    if (parseInt(selectedPaymentOption) === 2) {
                        const URL = `/placeOrder`
                        fetch(URL, {
                            method: 'POST',
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ addressToSend, selectedPaymentOption, couponCode })

                        }).then((res) => {

                            return res.json()
                        }).then((data) => {

                            if (data.success) {
                                window.location.href = `/orderConfirmed/${data.orderId}`
                            }
                            else if (data.message) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'error',
                                    text: data.message,
                                })
                            }
                        }).catch((err) => {
                            console.log(`error on paying using cod`)
                        })
                    }

                     // RAZORPAY
                     if (parseInt(selectedPaymentOption) === 4) {
                        console.log('Initiating payment via Razorpay');

                        // First, save the order as "payment pending" in the database
                        fetch('/placeOrder', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                addressToSend: addressToSend,
                                selectedPaymentOption: selectedPaymentOption,
                                status: 'payment pending',  // Set initial status as "payment pending"
                                couponCode: couponCode
                            })
                        })
                        .then(res => res.json())
                            .then(orderData => {
                                console.log('OrderDAta received : ', orderData)
                                if (orderData.success && orderData.orderId) {
                                    // Now initiate Razorpay payment after saving order with pending status
                                    const options = {
                                        key: "rzp_test_eOmJ744HMbCtga",
                                        amount: orderData.orderTotal * 100,
                                        currency: 'INR',
                                        name: 'LUXGEMS',
                                        description: 'Jewellery Purchase',
                                        order_id: orderData.razorpayOrderId,
                                        handler: function (response) {
                                            // Handle success response
                                            fetch('/updateOrderPendingStatus', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    orderId: orderData.orderId,
                                                    paymentId: response.razorpay_payment_id,
                                                    status: 'pending'  // Update status to "pedning- default"
                                                })
                                            })
                                            .then((res) => res.json())
                                                .then(result => {
                                                    if (result.success) {
                                                        window.location.href = `/orderConfirmed/${orderData.orderId}`;
                                                    } else {
                                                        Swal.fire({
                                                            icon: 'error',
                                                            title: 'Error',
                                                            text: 'Failed to update order status after payment.'
                                                        });
                                                    }
                                                })
                                                .catch((err) => console.error('Error updating order status:', err));
                                        },
                                        modal: {
                                            ondismiss: function () {
                                                Swal.fire({
                                                    icon: 'warning',
                                                    title: 'Payment Failed',
                                                    text: 'Your payment was not completed. You can retry from your orders page.',
                                                })
                                                    .then(() => {
                                                        // Redirect to the order confirmation page even if payment failed
                                                        window.location.href = `/orderConfirmed/${orderData.orderId}`;
                                                    });
                                            }
                                        },
                                        theme: {
                                            color: '#F37254'
                                        }
                                    };
                                    const razorpayInstance = new Razorpay(options);
                                    razorpayInstance.open();
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Failed to place order before payment initiation.'
                                    });
                                }
                            })
                            .catch(err => console.error('Error during order placement:', err));
                    }


// ===========================================
//                 function confirmCheckout(event) {
//                     console.log('reached proceed')

//                     if (event) {
//                         event.preventDefault();
//                     }

//                     document.getElementById('applyCouponBtn').addEventListener('click', function () {
//                         const couponCode = document.getElementById('couponCode').value;
//                     });


//                     const selectedAddressId = document.getElementById('selectedAddress').value;


//                     const defaultAddress = {
//                         fullName: '<%= defaultAddress?.fullName || "N/A" %>',
//                         addressLine1: '<%= defaultAddress?.addressLine1 || "N/A" %>',
//                         addressLine2: '<%= defaultAddress?.addressLine2 || "N/A" %>',
//                         city: '<%= defaultAddress?.city || "N/A" %>',
//                         state: '<%= defaultAddress?.state || "N/A" %>',
//                         country: '<%= defaultAddress?.country || "N/A" %>',
//                         pincode: '<%= defaultAddress?.pincode || "N/A" %>',
//                         phoneNumber: '<%= defaultAddress?.phoneNumber || "N/A" %>'
//                     };


//                     let addressToSend;

//                     if (selectedAddressId) {
//                         const selectedAddress = userAddress.address.find(addr => addr._id === selectedAddressId);
//                         addressToSend = {
//                             fullName: selectedAddress.fullName,
//                             addressLine1: selectedAddress.addressLine1,
//                             addressLine2: selectedAddress.addressLine2,
//                             city: selectedAddress.city,
//                             state: selectedAddress.state,
//                             country: selectedAddress.country,
//                             pincode: selectedAddress.pincode,
//                             phoneNumber: selectedAddress.phoneNumber
//                         };
//                     } else {
//                         addressToSend = defaultAddress;
//                     }

//                     let paymentIsChecked = false
//                     let selectedPaymentOption = 0
//                     for (let i = 0; i < paymentOptions.length; i++) {
//                         if (paymentOptions[i].checked) {
//                             selectedPaymentOption = paymentOptions[i].value
//                             paymentIsChecked = true
//                             break;
//                         }
//                     }

//                     if (!paymentIsChecked) {
//                         Swal.fire({
//                             title: 'Error',
//                             icon: 'error',
//                             text: 'Select a payment method',
//                             confirmButtonText: 'OK'
//                         });
//                         return
//                     }

//                     const orderTotal = parseFloat(document.getElementById('OrderTotal').innerText);
//                     const couponCode = document.getElementById('couponCode').value;




//                     fetch('/checkout', {
//                         method: 'POST',
//                         headers: {
//                             'Content-Type': 'application/json'
//                         },
//                         body: JSON.stringify({
//                             addressToSend,
//                             selectedPaymentOption,
//                             couponCode
//                         })
//                     })
//                         .then((res) => res.json())
//                         .then((data) => {
//                             console.log(data)
//                             if (!data.success) {
//                                 Swal.fire({
//                                     title: 'Error',
//                                     icon: 'error',
//                                     text: data.message,
//                                     confirmButtonText: 'OK'
//                                 });
//                                 return;
//                             }

//                             switch (parseInt(selectedPaymentOption)) {
//                                 case 0: // COD option
//                                     handleCODPayment(addressToSend, selectedPaymentOption, couponCode);
//                                     break;
//                                 case 1: // PayPal option
//                                     handlePayPalPayment(orderTotal, addressToSend, selectedPaymentOption, couponCode);
//                                     break;
//                                 case 2: // Wallet option
//                                     handleWalletPayment(addressToSend, selectedPaymentOption, couponCode);
//                                     break;
//                                 case 4: // Razorpay option
//                                     handleRazorpayPayment(addressToSend, selectedPaymentOption, couponCode);
//                                     break;
//                                 default:
//                                     Swal.fire({
//                                         icon: 'warning',
//                                         title: 'Error',
//                                         text: 'Invalid payment option selected.'
//                                     });
//                             }
//                         })
//                         .catch((err) => {
//                             console.error('Error during checkout process', err);
//                         });

//                     function handleCODPayment(addressToSend, selectedPaymentOption, couponCode) {
//                         fetch('/placeOrder', {
//                             method: 'POST',
//                             headers: { 'Content-Type': 'application/json' },
//                             body: JSON.stringify({ addressToSend, selectedPaymentOption, couponCode })
//                         })
//                             .then((res) => res.json())
//                             .then((data) => {
//                                 if (data.success) {
//                                     window.location.href = `/orderConfirmed/${data.orderId}`;
//                                 } else if (data.message) {
//                                     Swal.fire({
//                                         icon: 'warning',
//                                         title: 'Error',
//                                         text: data.message,
//                                     });
//                                 }
//                             })
//                             .catch((err) => console.error('Error on COD payment', err));
//                     }

//                     function handlePayPalPayment(orderTotal, addressToSend, selectedPaymentOption, couponCode) {
//                         fetch('/renderPaypal', {
//                             method: 'POST',
//                             headers: { 'Content-Type': 'application/json' },
//                             body: JSON.stringify({ totalAmount: orderTotal })
//                         })
//                             .then((res) => res.json())
//                             .then((data) => {
//                                 if (data.orderID) {
//                                     paypal.Buttons({
//                                         createOrder: function () {
//                                             return data.orderID;
//                                         },
//                                         onApprove: function (data, actions) {
//                                             return fetch('/placeOrder', {
//                                                 method: 'POST',
//                                                 headers: { 'Content-Type': 'application/json' },
//                                                 body: JSON.stringify({
//                                                     selectedAddressOption: addressToSend,
//                                                     selectedPaymentOption: selectedPaymentOption,
//                                                     paypalOrderID: data.orderID
//                                                 })
//                                             })
//                                                 .then((res) => res.json())
//                                                 .then((data) => {
//                                                     if (data.success) {
//                                                         window.location.href = `/orderConfirmed/${data.orderId}`;
//                                                     } else if (data.error) {
//                                                         Swal.fire({
//                                                             icon: 'warning',
//                                                             title: 'Error',
//                                                             text: data.error
//                                                         });
//                                                     }
//                                                 })
//                                                 .catch((err) => {
//                                                     console.error('Error processing PayPal payment', err);
//                                                 });
//                                         },
//                                         onCancel: function () {
//                                             window.location.href = '/payment-cancel';
//                                         }
//                                     }).render('#paypal-button-container');
//                                 } else {
//                                     console.error('No order ID returned from server.');
//                                 }
//                             })
//                             .catch((err) => {
//                                 console.error('Error fetching PayPal order', err);
//                             });
//                     }

//                     function handleWalletPayment(addressToSend, selectedPaymentOption, couponCode) {
//                         fetch('/placeOrder', {
//                             method: 'POST',
//                             headers: { 'Content-Type': 'application/json' },
//                             body: JSON.stringify({ addressToSend, selectedPaymentOption, couponCode })
//                         })
//                             .then((res) => res.json())
//                             .then((data) => {
//                                 if (data.success) {
//                                     window.location.href = `/orderConfirmed/${data.orderId}`;
//                                 } else if (data.message) {
//                                     Swal.fire({
//                                         icon: 'warning',
//                                         title: 'Error',
//                                         text: data.message,
//                                     });
//                                 }
//                             })
//                             .catch((err) => console.error('Error on Wallet payment', err));
//                     }

//                     function handleRazorpayPayment(addressToSend, selectedPaymentOption, couponCode) {
//                         console.log('Initiating Razorpay payment');

//                         fetch('/placeOrder', {
//                             method: 'POST',
//                             headers: { 'Content-Type': 'application/json' },
//                             body: JSON.stringify({
//                                 addressToSend: addressToSend,
//                                 selectedPaymentOption: selectedPaymentOption,
//                                 status: 'payment pending',
//                                 couponCode: couponCode
//                             })
//                         })
//                             .then(res => res.json())
//                             .then(orderData => {
//                                 if (orderData.success && orderData.orderId) {
//                                     const options = {
//                                         key: "rzp_test_eOmJ744HMbCtga",
//                                         amount: orderData.orderTotal * 100,
//                                         currency: 'INR',
//                                         name: 'LUXGEMS',
//                                         description: 'Jewellery Purchase',
//                                         order_id: orderData.razorpayOrderId,
//                                         handler: function (response) {
//                                             fetch('/updateOrderPendingStatus', {
//                                                 method: 'POST',
//                                                 headers: { 'Content-Type': 'application/json' },
//                                                 body: JSON.stringify({
//                                                     orderId: orderData.orderId,
//                                                     paymentId: response.razorpay_payment_id,
//                                                     status: 'pending'
//                                                 })
//                                             })
//                                                 .then((res) => res.json())
//                                                 .then(result => {
//                                                     if (result.success) {
//                                                         window.location.href = `/orderConfirmed/${orderData.orderId}`;
//                                                     } else {
//                                                         Swal.fire({
//                                                             icon: 'error',
//                                                             title: 'Error',
//                                                             text: 'Failed to update order status after payment.'
//                                                         });
//                                                     }
//                                                 })
//                                                 .catch((err) => console.error('Error updating order status:', err));
//                                         },
//                                         modal: {
//                                             ondismiss: function () {
//                                                 Swal.fire({
//                                                     icon: 'warning',
//                                                     title: 'Payment Failed',
//                                                     text: 'Your payment was not completed. You can retry from your orders page.',
//                                                 })
//                                                     .then(() => {
//                                                         window.location.href = `/orderConfirmed/${orderData.orderId}`;
//                                                     });
//                                             }
//                                         },
//                                         theme: {
//                                             color: '#F37254'
//                                         }
//                                     };
//                                     const razorpayInstance = new Razorpay(options);
//                                     razorpayInstance.open();
//                                 } else {
//                                     Swal.fire({
//                                         icon: 'error',
//                                         title: 'Error',
//                                         text: 'Failed to place order before payment initiation.'
//                                     });
//                                 }
//                             })
//                             .catch(err => console.error('Error during order placement:', err));
//                     }



                    //function for showing available coupon in Checkout page
                    const orderAmount = subtotal + deliveryCharge
                    async function fetchApplicableCoupons(orderAmount) {
                        try {
                            const response = await fetch('/getApplicableCoupons', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ orderAmount })
                            });

                            const data = await response.json();
                            const couponsDiv = document.getElementById('availableCoupons');

                            if (data.applicableCoupons.length > 0) {
                                couponsDiv.innerHTML = data.applicableCoupons.map(coupon =>
                                    `<div class="coupon">
                        <p>Code: ${coupon.couponCode}</p>
                        <p>Discount: ₹${coupon.discountAmount}</p>
                    </div>`
                                ).join('');
                            } else {
                                couponsDiv.innerHTML = '<p>No available coupons for this order amount.</p>';
                            }
                        } catch (error) {
                            console.error('Error fetching coupons:', error);
                        }
                    }
                }
            </script>