<!-- <style>
    .Container {
        border-radius: 10px;
        display: flex;
        padding: 20px;
        flex-direction: column;
        flex: 1;
        align-items: left;
        gap: 20px;
    }

    .SideBar .btn {
        display: block;
        width: 150px;
        margin-bottom: 10px;
        text-align: center;
    }



    .SideBar a {
        text-decoration: none;
        color: inherit;
    }

    .reportButtons {
        align-self: flex-end;
        margin-bottom: 20px;
    }


    .btn {
        width: 100px;
    }

    .italianno-regular {
        font-family: "Italianno", cursive;
        font-weight: 600;
        font-style: normal;
        font-size: 50px;
        color: #caaf7a;
    }

    .Search {
        display: flex;
        flex-direction: column;
        font-size: 42px;
        align-items: center;
        margin-left: 85px;
    }

    .Search form {
        display: flex;
    }

    .form-control {
        width: 500px;
    }

    .searchBtn {
        flex: 2;
        width: 10px;
        color: white;
        border: 2px;
    }

    .searchCategory {
        display: flex;
        flex-direction: row;
        border: 1px;
        border-radius: 4px;
        margin-top: 2%;
    }

    .Search {
        display: flex;
        flex-direction: row;
        margin-top: 10px;
    }




    .SideBar {
        width: 250px;
        margin: 20px;
        background-color: #caaf7a;
        color: white;
        height: 70vh;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: center;
        border-radius: 10px;
    }

    .MainContent {
        flex: 1;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .reportButtons {
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        height: auto;
        border-collapse: collapse;
    }
</style> -->


<style>
    /* General Container Styling */


body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .Container {
            display: flex;
            gap: 20px;
            margin: 20px;
        }

        /* Sidebar styling */
        .SideBar {
            width: 220px;
            height:fit-content;
            background-color: #333;
            color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .SideBar .btn {
            display: block;
            width: 100%;
            max-width: 180px;
            margin: 10px auto;
            padding: 10px;
            text-align: center;
            background-color: #444;
            color: #caaf7a;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .SideBar .btn:hover {
            background-color: #555;
        }

        .SideBar a {
            text-decoration: none;
            color: inherit;
        }

        .Search {
        display: flex;
        flex-direction: column;
        font-size: 42px;
        align-items: center;
        margin-left: 85px;
    }

    .Search form {
        display: flex;
    }

    .form-control {
        width: 500px;
    }

    .searchBtn {
        flex: 2;
        width: 10px;
        color: white;
        border: 2px;
    }

/* Report Section Styling */
.reportButtons {
    display: flex;
    gap: 15px;
    justify-content: flex-start;
    align-items: center;
    margin-bottom: 30px;
}

.reportButtons select, .reportButtons button {
    padding: 10px 15px;
    font-size: 14px;
    border-radius: 5px;
    border: 1px solid #ccc;
    background-color: #fff;
    transition: background-color 0.3s ease, border 0.3s ease;
}

.reportButtons select:hover, .reportButtons button:hover {
    background-color: #2d3b49;
    border-color: #caaf7a;
    color: #fff;
}

.reportButtons button {
    background-color: #caaf7a;
    border-color: #caaf7a;
    color: #fff;
    cursor: pointer;
}

.reportButtons button:hover {
    background-color: #1f2733;
    transform: scale(1.05);
}

/* Table Styling */
.table {
    width: 100%;
    border-collapse: collapse;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    overflow: hidden;
}

.table thead {
    background-color: #2d3b49;
    color: white;
    text-align: left;
}

.table th, .table td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #f0f0f0;
}

.table tr:nth-child(even) {
    background-color: #f9f9f9;
}

.table tr:hover {
    background-color: #f1f1f1;
}

/* Modal and Form Styling */
#customDateInputs {
    display: none;
}

input[type="date"], input[type="text"], .form-control {
    padding: 10px;
    font-size: 14px;
    border-radius: 5px;
    border: 1px solid #ccc;
    margin: 5px 0;
}

input[type="date"]:focus, input[type="text"]:focus, .form-control:focus {
    border-color: #caaf7a;
    outline: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .SideBar {
        width: 100%;
        position: relative;
        margin: 0;
        padding: 15px;
    }

    .Container {
        margin-left: 0;
    }

    .custom-navbar .navbar-collapse {
        justify-content: space-between;
    }

    .reportButtons {
        flex-direction: column;
        gap: 10px;
    }
}

</style>



<nav class="custom-navbar navbar navbar navbar-expand-md navbar-dark bg-dark" arial-label="navigation bar">

    <div class="container d-flex justify-content-between align-items-center">
        <a class="navbar-brand italianno-regular" href="#" style="font-size: 40px;">Sales Report<span>.</span></a>
        <div class="collapse navbar-collapse  d-flex flex-grow-1 justify-content-between align-items-center"
            id="navbars">
            <div class='Search'>
                <div class="searchCategory">
                    <form method="GET" action="/admin/Category" class="mb-4">
                        <input type="text" name="searchQuery" placeholder="Search" class="form-control"
                            value="<%= searchQuery %>">
                        <button type="submit" class="btn btn-white mt-2 searchBtn">
                            <i class="fas fa-search"></i>
                        </button>

                    </form>

                </div>
            </div>
        </div>
    </div>
</nav>

<div class="Container">
    <div class='SideBar'>
        <a href="/admin/home"><button class="btn btn-dark">Dashboard</button></a>
        <a href="/admin/salesReport"><button class="btn btn-dark">Sales Report</button></a>
        <a href="/admin/Category"><button class="btn btn-dark">Category</button></a>
        <a href="/admin/Products"><button class="btn btn-dark">Products</button></a>
        <a href="/admin/Customers"><button class="btn btn-dark">Customers</button></a>
        <a href="/admin/Orders"><button class="btn btn-dark">Order</button></a>
        <a href="/admin/Coupons"><button class="btn btn-dark">Coupons</button></a>
        <a href="/admin/Offers"><button class="btn btn-dark">Offers</button></a>
        <a href="/admin/trendingProducts"><button class="btn">Trending</button></a>

        <form action="/admin/logout" method="POST">
            <button type="submit" class="btn btn-dark">Logout</button>
        </form>
    </div>

  

    <div class="MainContent">
        <div class="reportButtons">
            <form id="reportForm">
                <label for="reportRange">Select Report Range:</label>
                <!-- <select id="reportRange" onchange="toggleDateInputs()"> -->
                <select id="reportRange">
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                    <option value="yearly">Yearly</option>
                    <option value="custom">Custom Date Range</option>
                </select>


                <div id="customDateInputs" style="display:inline;">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate" name="startDate">

                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate" name="endDate">


                </div>
                <button type="button" style="display:inline" onclick="generateReport()">Generate Report</button>
                <select id="reportFormat">
                    <option value="">Select Format</option>
                    <option value="pdf">PDF</option>
                    <option value="xlsx">EXCEL</option>
                </select>
                <button type="button" onclick="downloadReport()" >Download</button>
            </form>
        </div>

        <table id="salesReportTable" class="table table-bordered">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Order Date</th>
                    <th>Products</th>
                    <th>Quantity</th>
                    <th>Payment</th>
                    <th>Coupon</th>
                    <th>Total Amount</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <% salesData.forEach((order, index)=> { %>
                    <tr>
                        <td scope="row">
                            <%= order._id.toString().slice(0, 5) %>
                        </td>
                        <td>
                            <%= order.address.fullName %>
                        </td>
                        <td>
                            <%= new Date(order.orderDate).toLocaleDateString() %>
                        </td>
                        <td>
                            <% order.items.forEach((item)=> { %>
                                <%= item.productName %> <br>
                                    <% }) %>

                        </td>
                        <td>
                            <% order.items.forEach((item)=> { %>
                                <%= item.quantity %> <br>
                                    <% }) %>
                        </td>
                        <td>
                            <% let paymentMethod; 
                            switch (order.paymentMethod) 
                            { 
                                case '0' : paymentMethod='COD' ; break;
                                case '2' : paymentMethod='Wallet' ; break; 
                                case '1' : paymentMethod='PayPal' ; break;
                                case '3' : paymentMethod='Instamojo'; break;
                                case '4' : paymentMethod='Razorpay'; break;
                                default: paymentMethod='Unknown Payment Method' ; } %>

                                <%= paymentMethod %>
                        </td>
                        <td>
                            <%= order.coupon ? productDiscount : "No Coupon" %>
                        </td>
                        <td>
                            <%= order.totalAmount %>
                        </td>
                        <td>
                            <%= order.status %>
                        </td>
                    </tr>
                    <% }) %>
            </tbody>
        </table>
    </div>
</div>

<%- include('footer') %>

    <script>

        function validateDates(startDate, endDate) {
            if (new Date(endDate) <= new Date(startDate)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Date Range',
                    text: 'End date must be after the start date.',
                    confirmButtonText: 'OK',
                });
                return false;
            }

            return true;
        }
        async function generateReport() {
            // console.log('report')
            const reportRange = document.getElementById('reportRange').value;
            const format = document.getElementById('reportFormat').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            // console.log(endDate)
            // console.log(document.getElementById('reportRange'), document.getElementById('reportFormat'), document.getElementById('startDate'), document.getElementById('endDate'));

            try {
                console.log(reportRange)
                console.log(startDate)
                console.log(endDate)
                if (reportRange === 'custom') {
                    if (!startDate || !endDate) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Missing Dates',
                            text: 'Please select both start and end dates.',
                            confirmButtonText: 'OK',
                        });
                        return;
                    }
                    if (!validateDates(startDate, endDate)) {
                        return;
                    }
                }

                const response = await fetch('/admin/generateReport', {

                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        reportRange,
                        startDate,
                        endDate,
                        reportFormat,
                    }),
                });


                if (response.ok) {
                    const salesData = await response.json();
                    displaySalesData(salesData.orders);
                    Swal.fire({
                        icon: 'success',
                        title: 'Report Generated',
                        text: 'The sales report has been generated successfully!',
                        confirmButtonText: 'OK',
                    });
                }
                else {

                    throw new Error('Response error');
                }

            } catch (error) {
                console.error('Error during report generation:', error);

                // Show error message
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message,
                    confirmButtonText: 'OK',
                });
            }
        }

        const displaySalesData = (orders) => {
            const tbody = document.querySelector('#salesReportTable tbody');
            tbody.innerHTML = '';

            orders.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `
                <td>${order._id}</td>
                <td>${order.customer}</td>
                <td>${order.date}</td>
                <td>${order.products.map(item => `${item.productName}`).join('<br>')}</td>
                <td>${order.products.map(item => `${item.quantity}`).join('<br>')}</td>
                <td>${order.paymentMethod === '0' ? 'COD' : order.paymentMethod === '1' ? 'Wallet' : order.paymentMethod === '2' ? 'PayPal' : 'Unknown Payment Method'}</td>
                <td>${order.coupon ? discount : 'No Coupon'}</td>
                <td>${order.totalPrice}</td>
                <td>${order.status}
            `;
                tbody.appendChild(row);
            });
        };

        async function downloadReport() {
            // console.log('Rport download')
            const reportRange = document.getElementById('reportRange').value;
            // console.log(reportRange)

            let startDate = null;
            let endDate = null;
            console.log(startDate, endDate)
            // Only fetch startDate and endDate if 'custom' report range is selected
            if (reportRange === 'custom') {
                startDate = document.getElementById('startDate') ? document.getElementById('startDate').value : null;
                endDate = document.getElementById('endDate') ? document.getElementById('endDate').value : null;

                // Check if both startDate and endDate are provided for the custom range
                if (!startDate || !endDate) {
                    alert("Please provide both start and end dates for custom range.");
                    return; // Exit if dates are missing
                }
            }

            const reportFormat = document.getElementById('reportFormat').value;
            // console.log(reportFormat)

            // Fetching the report download link from the server
            const response = await fetch('/admin/downloadReport', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reportRange, startDate, endDate, format: reportFormat })
            });

            // Handling the response for download
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `sales_report_${reportRange}.${reportFormat.toLowerCase()}`;
                document.body.appendChild(a);
                a.click();
                a.remove();
            } else {
                console.error('Error downloading report:', await response.text());
            }
        }


    </script>