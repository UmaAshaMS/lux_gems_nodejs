<body>

    <style>
        .Container {
            display: flex;
            flex: 1;
            flex-direction: row;
            border-radius: 10px;

        }

        .Product-container {
            display: flex;
            flex-direction: row;
            flex: 1;
            margin-left: 0px;
            padding: 20px;
            /* Arrange children side by side */
            /* Space between sidebar and table */

        }

        .Product-container table {

            text-align: center;
            flex-direction: column;
            flex: 1;

        }

        .SideBar .btn {
            display: block;
            /* Make buttons stack vertically */
            width: 150px;
            margin-bottom: 10px;
            /* Space between buttons */
            text-align: center;
        }



        .SideBar {
            width: 250px;
            margin: 20px;
            background-color: #caaf7a;
            color: white;
            height: 70vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            border-radius: 10px;

        }

        .SideBar a {
            text-decoration: none;
            color: inherit
        }

        .Customer-Page {
            display: flex;
            flex-direction: column;
        }

        .btn {
            width: 100px;
        }

        .searchProducts {
            display: flex;
            flex-direction: row;
            border: 1px;
            border-radius: 4px;
            gap: 10px;
            width: 800px;
            margin-top: 2%;

        }

        .Search form {
            display: flex;
        }

        .form-control {
            width: 500px;
            margin-left: 90px;
        }

        .searchBtn {
            flex: 2;
            width: 10px;
            color: white;
            border: 2px;
            flex-shrink: 0;
            /* Prevent the button from shrinking */
        }

        .italianno-regular {
            font-family: "Italianno", cursive;
            font-weight: 600;
            font-style: normal;
            font-size: 50px;
            color: #caaf7a
        }

        .AddProduct {
            background-color: #caaf7a;
            color: black;
            font-weight: 700;
            width: 200px;
            align-items: end;
            align-self: flex-end;
            margin-right: 0%;
            transition: background-color 0.3s ease;
            margin-top: 0%;
            margin-right: 0%;
            justify-content: center;
        }

        .AddProduct a {
            text-decoration: none;
            color: black
        }

        .AddProduct:hover,
        .AddProduct:focus,
        .AddProduct:active {
            background-color: #b49569;
            /* Slightly darker shade on interaction */
            color: black;
            /* Keep the text color black */
            outline: none;
            /* Remove outline */
            box-shadow: none;
            /* Remove any shadow applied by Bootstrap */
        }

        .table {
            margin-top: 0%;
            width: 700px;
            height: auto;
            border: black;
            text-align: center;
            height: fit-content;
            align-self: center;
        }
    </style>
    <nav class="custom-navbar navbar navbar navbar-expand-md navbar-dark bg-dark" arial-label="navigation bar">

        <div class="container d-flex justify-content-between align-items-center">
            <a class="navbar-brand italianno-regular" href="#" style="font-size: 40px;">Products<span>.</span></a>
            <div class="collapse navbar-collapse  d-flex flex-grow-1 justify-content-between align-items-center"
                id="navbars">
                <div class='Search'>
                    <div class="searchProducts">
                        <form method="GET" action="/admin/Products" class="mb-4">
                            <input type="text" name="searchQuery" placeholder="Search Products" class="form-control"
                                value="<%= searchQuery %>">
                            <button type="submit" class="btn btn-white mt-2 searchBtn">
                                <i class="fas fa-search"></i>
                            </button>

                        </form>

                    </div>
                </div>
                <!-- Button to Open the Modal -->
                <form method="GET" action="/admin/addProduct">

                    <button type="submit" class="btn AddProduct" data-bs-toggle="modal" data-bs-target="#productModal"
                        style="margin-right: 0%;">Add Product
                    </button>
                </form>
            </div>
        </div>
    </nav>
    <div class="Product-container">

        <div class="Container">
            <div class='SideBar'>
                <a href="/admin/home"><button class="btn btn-dark">  Dashboard</button></a>
                <a href="/admin/Category"><button class="btn btn-dark"> Category</button></a>
                <a href="/admin/Products"><button class="btn btn-dark">Products</button></a>
                <a href="/admin/Customers"><button class="btn btn-dark">Customers</button></a>
                <a href="/admin/Orders"><button class="btn btn-dark">Order</button></a>
                <a href="/admin/Coupons"><button class="btn btn-dark">Coupons</button></a>
                <a href="/admin/Banner"><button class="btn btn-dark">Banner</button></a>
                <form action="/admin/logout" method="POST">
                    <button type="submit" class="btn btn-dark">Logout</button>
                </form>
            </div>

            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Sl.No</th>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Stock</th>
                        <th scope="col">Category</th>
                        <th scope="col">Status</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% products.forEach((product,index)=> { %>

                        <tr>
                            <th scope="row">
                                <%= index+1%>
                            </th>
                            <td>
                                <%= product.productName %>
                            </td>
                            <td>
                                <%= product.productPrice %>
                            </td>
                            <td>
                                <%= product.stock %>
                            </td>
                            <td>
                                <%= product.productCategory?.name %>
                            </td>
                            <td>
                                <%= product.isActive ? 'Active' : 'Blocked' %>
                            </td>
                            <td>
                                <% if(product.isActive){ %>
                                    <!-- Show edit and block button -->
                                    <button class="btn btn-warning"
                                        onclick="redirectToEditPage('<%= product._id %>')">Edit</button>
                                    <button class="btn btn-danger"
                                        onclick="blockProduct('<%= product._id %>')">Block</button>
                                    <% } else { %>
                                        <!-- Show unblock and delete button -->
                                        <button class="btn btn-success"
                                            onclick="unblockProduct('<%= product._id %>')">Unblock</button>
                                        <button class="btn btn-dark"
                                            onclick="deleteProduct('<%= product._id %>')">Delete</button>
                                        <% } %>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>

        </div>
    </div>

    <%- include('footer') %>


        <script>
            //function to render edit Product page for a product
            function redirectToEditPage(productId) {
                window.location.href = `/admin/editProduct/${productId}`;
            }

            //function to block product
            function blockProduct(productId) {
                if (confirm("Are you sure to block this product ? ")) {
                    const URL = `/admin/blockProduct/${productId}`;
                    fetch(URL, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => {
                            if (response.ok) {
                                alert("Product blocked successfully!");
                                Swal.fire({
                                    title: "Product Blocked!",
                                    text: "Product blocked successfully!",
                                    icon: "success",
                                    // timer: 12000
                                });
                                console.log("About to reload the page...");
                                location.reload(); // Refresh the page to reflect changes


                            } else {
                                alert("Failed to block product. Please try again.");
                                Swal.fire({
                                    title: "Error!",
                                    text: "Product Not blocked !",
                                    icon: "error",
                                    // timer: 12000
                                });
                            }
                        })
                        .catch(err => {
                            console.error("Failed to unblock product:", response.statusText);
                            console.error("Error during product block:", err);
                            alert("An error occurred while blocking the product.");
                        });
                }
            }


            //function to unblock Product
            function unblockProduct(productId) {
                if (confirm("Are you sure to unblock this product?")) {
                    const URL = `/admin/unblockProduct/${productId}`;
                    fetch(URL, {
                        method: 'PUT',
                        headers: {
                            'Content-type': 'application/json'
                        }
                    })
                        .then(response => response.json()) // Convert the response to JSON
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    title: "Product Unblocked!",
                                    text: data.message,
                                    icon: "success"
                                });
                                location.reload(); // Refresh the page to reflect changes
                            } else {
                                Swal.fire({
                                    title: "Error!",
                                    text: data.message,
                                    icon: "error"
                                });
                            }
                        })
                        .catch(err => {
                            console.error(`Error in unblocking product: ${err}`);
                            Swal.fire({
                                title: "Error!",
                                text: "An unexpected error occurred.",
                                icon: "error"
                            });
                        });
                }
            }


            //Function to Delete Category
            function deleteProduct(productId) {
                if (confirm("Are you sure you want to delete this product?")) {
                    const URL = `/admin/deleteProduct/${productId}`;
                    fetch(URL, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => {
                            if (response.ok) {
                                alert("Product deleted successfully!");
                                window.location.reload(); // Refresh the page to reflect changes
                            } else {
                                alert("Failed to delete product. Please try again.");
                            }
                        })
                        .catch(err => {
                            console.error("Error during product deletion:", err);
                            alert("An error occurred while deleting the product.");
                        });
                }
            } 
        </script>
</body>