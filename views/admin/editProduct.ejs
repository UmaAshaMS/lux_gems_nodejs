<body>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .Container {
            display: flex;
            gap: 20px;
            margin: 20px;
        }

        /* Sidebar styling */
        .SideBar {
            width: 220px;
            height:fit-content;
            background-color: #333;
            color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .SideBar .btn {
            display: block;
            width: 100%;
            max-width: 180px;
            margin: 10px auto;
            padding: 10px;
            text-align: center;
            background-color: #444;
            color: #caaf7a;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .SideBar .btn:hover {
            background-color: #555;
        }

        .SideBar a {
            text-decoration: none;
            color: inherit;
        }

        .Form-container {
            display: flex;
            flex-direction: row;
            flex: 1;
            margin-left: 0px;
            padding: 20px;
            background-color: #eaeaea;
            box-sizing: border-box;
            /* Arrange children side by side */
            /* Space between sidebar and table */
        }

        .searchProducts {
            display: flex;
            flex-direction: row;
            border: 1px;
            border-radius: 4px;
            gap: 10px;
            width: 800px;
            margin-top: 2%;

        }

        .Search form {
            display: flex;
        }

        .form-control {
            width: 500px;
            margin-left: 90px;
        }

        .searchBtn {
            flex: 2;
            width: 10px;
            color: white;
            border: 2px;
            flex-shrink: 0;
            /* Prevent the button from shrinking */
        }

        .AddProduct {
            background-color: #caaf7a;
            color: black;
            font-weight: 700;
            width: 200px;
            align-items: end;
            align-self: flex-end;
            margin-right: 0%;
            transition: background-color 0.3s ease;
            margin-top: 0%;
            margin-right: 0%;
            justify-content: center;
        }

        .AddProduct a {
            text-decoration: none;
            color: black
        }

        .AddProduct:hover,
        .AddProduct:focus,
        .AddProduct:active {
            background-color: #b49569;
            /* Slightly darker shade on interaction */
            color: black;
            /* Keep the text color black */
            outline: none;
            /* Remove outline */
            box-shadow: none;
            /* Remove any shadow applied by Bootstrap */
        }

        .Form-Container {
            margin-top: 20px;
            padding: 20px;
            margin-left: 250px;
            background-color: #f8f9fa;
            justify-content: center;
            /* Center the form horizontally */

            /* Light background color for the form */
        }

        .form-group {
            margin-bottom: 15px;
            margin: 20px;
            border-radius: 8px;
            width: 600px;
            /* Width of the form */
        }



        .form-group label {
            font-weight: bold;
        }

        #productDescription {
            width: 100%;
            height: fit-content;
            resize: none;
        }

        .form-group .btn {
            align-items: center;
            justify-content: center;
        }

        .form-group input {
            width: 65%;
        }

        .btn {
            margin-top: 10px;
        }

        .action-buttons {
            margin-top: 20px;
        }

        .action-buttons .btn {
            margin-right: 10px;
        }

        .chooseBtn {
            width: 250px;
            justify-self: center;
            align-items: center;

        }

        .FormButtons {
            justify-content: center;
            text-align: center;
        }



        .FormButtons a {
            text-decoration: none;
            color: white
        }

        #imagePreview {
            min-height: 100px;

            /* max-width: 100px; */
        }

        .image-container {
            position: relative;
            display: inline-block;
            margin-right: 10px;
            margin-bottom: 10px;
            width: 100px;
            /* Set the width of each image container */
            height: 100px;
            /* Set the height of each image container */
        }

        .preview-thumbnail {
            width: 100%;
            height: 100%;
            object-fit: cover;
            /* Ensures the image covers the entire container without distortion */
            border-radius: 5px;
        }

        .remove-image {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            text-align: center;
            cursor: pointer;
            font-size: 14px;
            line-height: 18px;
        }

        .preview-thumbnail {
            cursor: pointer;
            /* This will change the cursor to a hand when hovering over the image */
        }

        #cropModal {
            display: none;
            position: fixed;
            z-index: 1000;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px;
            width: 80%;
            height: 80%;
        }

        #cropImage {
            min-height: auto;
        }
    </style>
    <nav class="custom-navbar navbar navbar navbar-expand-md navbar-dark bg-dark" arial-label="navigation bar">

        <div class="container d-flex justify-content-between align-items-center">
            <a class="navbar-brand italianno-regular" href="#" style="font-size: 40px;">Edit Products<span>.</span></a>
            <div class="collapse navbar-collapse  d-flex flex-grow-1 justify-content-between align-items-center"
                id="navbars">
                <div class='Search'>
                    <div class="searchProducts">


                    </div>
                </div>
                <!-- Button to Open Add Product Form -->
                <form method="GET" action="/admin/Products">

                    <button type="submit" class="btn AddProduct" style="margin-right: 0%;">Back To Products
                    </button>
                </form>
            </div>
        </div>
    </nav>
    <div class="Container">
        <div class='SideBar'>
            <a href="/admin/home"><button class="btn btn-dark">  Dashboard</button></a>
            <a href="/admin/salesReport"><button class="btn btn-dark"> Sales Report</button></a>
            <a href="/admin/Category"><button class="btn btn-dark"> Category</button></a>
            <a href="/admin/Products"><button class="btn btn-dark">Products</button></a>
            <a href="/admin/Customers"><button class="btn btn-dark">Customers</button></a>
            <a href="/admin/Orders"><button class="btn btn-dark">Order</button></a>
            <a href="/admin/Coupons"><button class="btn btn-dark">Coupons</button></a>
            <a href="/admin/Offers"><button class="btn btn-dark">Offers</button></a>
            <a href="/admin/Trending"><button class="btn btn-dark">Trending</button></a>
            <form action="/admin/logout" method="POST">
                <button type="submit" class="btn btn-dark">Logout</button>
            </form>
        </div>
        <!-- Form to edit Products -->
        <div class="Form-Container">
            <form action="/admin/editProduct/<%= product._id  %>" method="POST" id="editProductForm"
                enctype="multipart/form-data">
                <div class="form-group">

                    <label for="productName">Product Name : </label>
                    <input type="text" id="productName" name="productName" value="<%= product.productName %>" required>
                </div>
                <div class="form-group">
                    <label for="Category">Product Category : </label>

                    <select id="productCategory" name="productCategory" required>

                        <% category.forEach(category=> {
                            if (category.name == product.productCategory ) {
                            %>
                            <option value="<%=category._id%>" selected="selected">
                                <%= category.name %>
                            </option>
                            <% } else { %>
                                <option value="<%= category._id %>">
                                    <%= category.name %>
                                </option>
                                <% } }) %>
                    </select>
                </div>

                <div class="form-group">
                    <label for="productPrice">Product Price : </label>
                    <input type="text" id="productPrice" name="productPrice" value="<%= product.productPrice %>"
                        required>
                </div>

                <div class="form-group">
                    <label for="stock">Stock : </label>
                    <input type="Number" id="stock" name="stock" value="<%= product.stock %>" required>
                </div>
                <div class="form-group">
                    <label for="productDiscuont">Product Discount in % :</label>
                    <input type="text" id="productDiscount" name="productDiscount"
                        value="<%= product.productDiscount %>">
                </div>
                <div class="form-group">
                    <label for="productDescription">Product Description :</label>
                    <textarea id="productDescription" name="productDescription"
                        required><%= product.productDescription %></textarea>
                </div>
                <!-- Images shown and delete button -->
                <div class="container mt-4">
                    <div id="imagePreview" class="row">
                        <!-- Image previews will be appended here -->

                        <% if (product.productImage && product.productImage.length> 0) { %>
                            <% product.productImage.forEach(function(img, index) { %>
                                <% var formattedImgPath=   img.replace(/\\/g, '/' ); %>
                                    <!-- Replace backslashes with forward slashes -->
                                    <div class="col-md-3 mb-3 image-container"
                                        data-image-path="<%= formattedImgPath %>">
                                        <img src="/<%= formattedImgPath %>" alt="Image" loading="lazy"
                                            class="img-fluid img-thumbnail image-preview" onclick="initCropper(this)">
                                        <button class="btn btn-danger mt-2 ms-2" type="button"
                                            onclick="deleteImage('<%= formattedImgPath %>',this, '<%= productId %>')">Delete</button>
                                    </div>
                                    <% }); %>
                                        <% } %>
                    </div>
                </div>
                <!-- Choose Images Button -->
                <div class="form-group">
                    <button class="btn btn-dark chooseBtn" type="button" onclick="triggerFileInput()">Choose
                        Images</button>
                    <input type="file" id="productImage" name="productImage" accept="image/*" multiple
                        style="display: none" onchange="previewImages(event)" value="<%= product.productImage %>">
                    <div class="container mt-4">
                        <div id="imagePreview" class="row">
                        </div>
                    </div>


                </div>
                <div class="FormButtons">
                    <button class="btn  btn-dark chooseBtn" type="button" onclick="submitForm()" form="editProductForm">Save Changes</button>
                    <button class="btn btn-secondary"><a href="/admin/Products">Cancel</a></button>
            </form>
        </div>
        <!-- Crop Modal -->
        

        <div class="cropper-main">
            <div id="cropModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeCropModal()">&times;</span>
                    <h2>Crop Image</h2>
                    <div>
                        <img id="cropImage" src="" alt="Crop preview">
                    </div>
                    <div class="modal-buttons">
                        <button onclick="cropImage()">Crop</button>
                        <button onclick="closeCropModal()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <script>

document.addEventListener("DOMContentLoaded", function () {
    let cropper;
    let currentImageElement;

    // Array to store existing images
    const uploadedImages = [];

    // Function to trigger the file input dialog
    window.triggerFileInput = function () {
        productImage.click();
    };

    // Function to preview images
    window.previewImages = function (event) {
        console.log("previewImages");
        const files = event.target.files;
        const preview = document.getElementById('imagePreview');

        // Combine existing images with newly selected files
        const totalImages = uploadedImages.length + files.length;

        // Check for maximum image upload limit
        if (totalImages > 4) {
            Swal.fire({
                title: "You can upload a maximum of 4 images!",
                text: "Maximum 4 Images!",
                icon: "error",
                timer: 12000
            });
            return;
        }

        // Loop through newly selected files and add to preview
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
            reader.onload = function (event) {
                const imgContainer = document.createElement('div');
                imgContainer.classList.add('image-container');
                imgContainer.id = `image-${uploadedImages.length}`; // Assign unique ID

                const img = document.createElement('img');
                img.classList.add('preview-thumbnail');
                img.src = event.target.result;

                const removeBtn = document.createElement('button');
                removeBtn.classList.add('remove-image');
                removeBtn.innerHTML = '&times;';
                removeBtn.onclick = function () {
                    imgContainer.remove();
                    // Remove from the uploadedImages array
                    uploadedImages.splice(uploadedImages.indexOf(file), 1);
                };

                imgContainer.appendChild(img);
                imgContainer.appendChild(removeBtn);

                img.onclick = function () {
                    openCropModal(img);
                };

                preview.appendChild(imgContainer);
                uploadedImages.push(file); // Store the file in the uploadedImages array
            };
            reader.readAsDataURL(file);
        }
    };

    // Function to open the cropping modal
    function openCropModal(imgElement) {
        const cropModal = document.getElementById('cropModal');
        const cropImage = document.getElementById('cropImage');
        cropImage.src = imgElement.src;
        currentImageElement = imgElement;
        cropModal.style.display = 'block';

        if (cropper) {
            cropper.destroy();
        }
        cropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 2
        });
    }

    // Function to close the cropping modal
    window.closeCropModal = function () {
        const cropModal = document.getElementById('cropModal');
        cropModal.style.display = 'none';
        if (cropper) {
            cropper.destroy();
        }
    };

    // Function to crop the image
    window.cropImage = function () {
        const croppedCanvas = cropper.getCroppedCanvas();
        currentImageElement.src = croppedCanvas.toDataURL();
        closeCropModal();
    };

})
    
    //Function to delete Images
function deleteImage(imagePath, buttonElement, productId) {
    console.log('Trying to delete image')
    console.log('Image path : ', imagePath)
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/admin/deleteImage', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imagePath: imagePath, productId : productId}),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const imageContainer = buttonElement.closest('.image-container');
                    imageContainer.remove();
                    Swal.fire(
                        'Deleted!',
                        data.message||'Your image has been deleted.',
                        'success'
                    );
                } else {
                    Swal.fire(
                        'Error!',
                         data.message ||'Failed to delete the image.',
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error deleting image:', error);
                Swal.fire(
                    'Error!',
                    'There was an error deleting the image.',
                    'error'
                );
            });
        }
    });
}

//Form submition function
function submitForm() {
        const form = document.getElementById('editProductForm');
        const formData = new FormData(form);  
        const files = document.querySelector('input[type="file"]').files;

        console.log('Form data : ',formData)

        fetch(`/admin/editProduct/<%= product._id %>`, {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            console.log('Response data from server:', data);

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Product Updated!',
                    text: data.message || 'Your product details have been updated successfully.',
                }).then(() => {
                    window.location.href = '/admin/Products';  // Redirect to products page
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.message || 'There was an error updating the product.',
                });
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'There was an error saving your changes. Please try again.',
            });
            console.error('Error:', error);
        });
    }

    </script>
        